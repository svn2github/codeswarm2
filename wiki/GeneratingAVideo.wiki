#summary Howto generate a video of your project's activity with code_swarm.

= Introduction =

This guide explains how to generate a video under a Linux install (it is based on Linux tools) but might be applied to a Windows workstation as well (some other tools might need to be used)

To make it short, generating your video is done in 4 steps

# get the activity log out of your versionning system

# convert the activity log to something code_swarm can use

# excuting code_swarm

# making a video out of the exported images

The first step, of course, is to download code_swarm from SVN (check out the [Source] page for that, and the Processing program, which you will need to execute code_swarm. Processing is about 30MB to download, so plan that ahead.

= Getting the activity log =

== SVN ==

To get the activity log from your SVN repository, just get a local copy of your repository, enter the main directory and execute
{{{
  svn log -v > activity.log
}}}

This will create a file called *activity.log*.

== Other versionning systems ==

Documentation to come

= Convert the log =

code_swarm has a python converter in its convert_logs directory.
Before you start using it, make sure you read this issue report: [http://code.google.com/p/codeswarm/issues/detail?id=6]

# Move to the convert_logs directory

# Copy the activity.log file generated above into the current directory

# Launch *python convert_logs.py -s activity.log -o activity.xml

This will generate a file called acitvity.xml. 

At this point, you will not need activity.log anymore, so you can delete it.

= Executing code_swarm =

To execute code_swarm, you need the Processing application (download from http://processing.org). Open Processing and choose "Open". Point it to code_swarm/code_swarm.pde.
The automatic video generation doesn't work too well just yet, so we will have to first generate screenshots and *then* join them together to make a video.

== Configuring code_swarm.pde ==

You will need to make a few changes inside code_swarm.pde in order to suit your program.

*int WIDTH = 640;* defines the width of the generated screenshots. This is the recommended value (below that, graphics start to get over one another).

*int HEIGHT = 480;* defines the height of the generated screenshots. This is the recommended value.

*int FRAME_RATE = 24;* defines the frame rate (how many images per second in the resulting video to get a smooth animation. 24 is a good value.

*String INPUT_FILE = "log.xml";* should be changed to whatever your log file's name is (in the example above, it was *activity.xml*)

*long dateSkipper* defines the frequency to which a new image is shown. By default, there are 4 images per day (6*60*60*1000, or one every 6 hours). You could change that to every 2 hours if you have a very active project using: 2*60*60*1000.

*boolean takeSnapshots* has to be true if you want to generate screenshots, which is necessary at this point

*boolean showLegend* (around line 60) could be set to true if you want a color legend to be shown in the top-left of your screenshots. So far, the legend is a big ugly as it doesn't translate the regular expressions in a human way, but still it helps understand what is what.

== Executing code_swarm ==
Once you are ready, just click the "play/run" button and wait. This operation could take up to several hours for large activity logs. To give a rough idea, it takes 2 hours using one processor of a dual-core 1.3GHz for an activity log of about 15000 commits (spread over 4 years).

== Executing for PHP project ==
For PHP projects (or any language that is not currently supported) you will need to:

# add a *phpColors();* call to the *initColors()* function (around line 110) and comment out the current *eclipseColors();* call

# create a phpColors() function that will look like this:
{{{
  void phpColors()
  {
    //code (red)
    colorAssigner.addRule( ".*\\.php", color(0,255,255), color(15,255,255) );

    //documentation (blue)
    colorAssigner.addRule( ".*/documentation/.*|.*/lang/.*|.*\\.html|.*\\.htm", color(150,255,255), color(170,255,255) );

    //media (turquoise)
    colorAssigner.addRule( ".*\\.gif|.*\\.jpg|.*\\.jpeg|.*\\.png|.*\\.css|.*\\.swf", color(120,255,255), color(135,255,255) );

    //alternative code (orange)
    colorAssigner.addRule( ".*\\.js|.*\\.jar|.*\\.war|.*\\.java|.*\\.class|.*\\.lzx", color(25,255,255), color(40,255,255) );

    //anything else (purple)
    colorAssigner.addRule( ".*", color(200,255,255), color(215,255,255) );
  }
}}}

Be careful that the color code is very tricky. We might need more information here, but the basic idea is that it's not a normal RGB code and it's not either a RGB color code mask. I added comments before every line so you can get an idea of what to use for at least five colors.

= Creating the video = 
The previous step created a series of screenshots in the PNG format under the *code_swarm/frames/* directory. Now you want to use them to build a video. MEncoder is one tool to do that. Just get into that frames/ directory and type:


  ,,mencoder mf://*.png -mf fps=24:type=png -ovc lavc -oac copy -o movie.avi,,


For a 15000 commits video, this might take about 40MB, so you want to reduce the size a little bit. You can do that by converting to DivX (MPG4) and reducing the frame rate:

  ,,mencoder movie.avi  -ovc xvid -oac mp3lame -xvidencopts bitrate=200 -o project-activity.avi,,

For a 40MB video, this reduces the size to 10MB. You can also try using the h264 format if your MEncoder has the right libraries to do so:

  ,,mencoder movie.avi -ovc x264 -oac mp3lame -xvidencopts bitrate=200 -o project-activity2.avi,,


That's it, you should have a beautiful video of your project's activity by now!